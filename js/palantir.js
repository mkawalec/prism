// Generated by CoffeeScript 1.6.2
var cache, helpers, imagelist, init, notifier, palantir, singleton, template, __;

__ = function(str) {
  return str;
};

init = function(initiator, public_initiator, spec, inherited) {
  var new_id, _helpers, _ref, _ref1;

  _helpers = helpers();
  new_id = _helpers.random_string();
  if ((initiator.prototype.call_ids == null) && (initiator.prototype.callers == null)) {
    initiator.prototype = {};
  }
  initiator.prototype.call_ids = (_ref = initiator.prototype.call_ids) != null ? _ref : [];
  initiator.prototype.call_ids.push(new_id);
  initiator.prototype.call_that = public_initiator;
  if ((inherited.prototype.callers == null) && (inherited.prototype.call_ids == null)) {
    inherited.prototype = {};
  }
  inherited.prototype.callers = (_ref1 = inherited.prototype.callers) != null ? _ref1 : [];
  inherited.prototype.callers.push(new_id);
  if (inherited.prototype.call_ids != null) {
    if ((_.intersection(initiator.prototype.callers, inherited.prototype.call_ids)).length > 0) {
      return inherited.prototype.call_that;
    }
  }
  return inherited(spec);
};

singleton = function(fn) {
  return function() {
    if ((singleton.prototype.cached != null) && (singleton.prototype.cached[fn] != null)) {
      return singleton.prototype.cached[fn];
    }
    if (singleton.prototype.cached == null) {
      singleton.prototype = {};
      singleton.prototype.cached = {};
    }
    singleton.prototype.cached[fn] = (_.partial(fn, arguments))();
    return singleton.prototype.cached[fn];
  };
};

helpers = singleton(function(spec, that) {
  var chars, _props;

  that = that != null ? that : {};
  chars = 'abcdefghijklmnoprstuwqxyzABCDEFGHIJKLMNOPRSTUWQXYZ0123456789';
  _props = ['id', 'data-source', 'data-actions', 'data-shown_property', 'data-binding'];
  that.clone = function(element) {
    var clone, tag_name;

    tag_name = element.tagName.lower();
    clone = $("<div/>", {
      "class": tag_name,
      'data-tag': tag_name
    });
    _.each(_props, function(prop) {
      return $(clone).attr(prop, $(element).attr(prop));
    });
    $(element).replaceWith(clone);
    return clone;
  };
  that.classify = function(action) {
    switch (action) {
      case 'info':
        return 'info';
      case 'edit':
        return 'warning';
      case 'delete':
        return 'danger';
    }
  };
  that.name = function(action) {
    switch (action) {
      case 'delete':
        return __('Delete');
      case 'info':
        return __('Info');
      case 'edit':
        return __('Edit');
    }
    return __(action);
  };
  that.is_number = function(data) {
    return !isNaN(parseFloat(data)) && isFinite(data);
  };
  that.random_string = function(length) {
    var i, ret, _i;

    if (length == null) {
      length = 12;
    }
    ret = [];
    for (i = _i = 0; 0 <= length ? _i < length : _i > length; i = 0 <= length ? ++_i : --_i) {
      ret.push(chars[Math.floor(chars.length * Math.random())]);
    }
    return ret.join('');
  };
  return that;
});

notifier = function(spec, that) {
  var code_messages, messages, placeholder, show_message;

  that = that != null ? that : {};
  placeholder = $('#alerts');
  that.notify = function(req_data) {
    if (messages[req_data] == null) {
      if (code_messages[req_data.status] != null) {
        show_message(code_messages, req_data.status);
        return;
      }
      return;
    }
    return show_message(messages, req_data);
  };
  show_message = function(messages, key) {
    var alert, close_button, message_wrapper;

    alert = $('<div/>', {
      "class": "alert alert-" + messages[key].type
    });
    close_button = $('<button/>', {
      "class": 'close',
      'data-dismiss': 'alert',
      text: 'x'
    });
    close_button.on('click', function(e) {
      return alert.hide('slide', 'fast', function() {
        var el, _i, _len, _ref, _results;

        _ref = placeholder.find('.ui-effects-wrapper');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          el = _ref[_i];
          _results.push(placeholder[0].removeChild(el));
        }
        return _results;
      });
    });
    message_wrapper = $('<div/>', {
      "class": 'message_wrapper',
      text: messages[key].message
    });
    alert.append(close_button);
    alert.append(message_wrapper);
    alert.hide();
    placeholder.append(alert);
    return alert.show('slide', 'fast');
  };
  code_messages = {
    500: {
      type: 'error',
      message: 'Nastąpił błąd serwera. Sprawa jest badana...'
    }
  };
  messages = {
    1: {
      type: 'success',
      message: __('The action has succeeded')
    }
  };
  return that;
};

template = function(spec, that) {
  var add_element, base_url, fill, get_spec, inheriter, spec_regex, tag_renderers, trans_regex, translate, _helpers, _libs, _notifier, _ref;

  that = that != null ? that : {};
  if (spec[0] != null) {
    spec = spec[0];
  }
  trans_regex = /{%(.*?)%}/g;
  spec_regex = /{{(.*?)}}/g;
  _libs = {};
  _.extend(_libs, helpers(spec));
  base_url = (_ref = spec.base_url) != null ? _ref : url_root;
  spec.base_url = base_url;
  translate = function(_, text) {
    return __($.trim(text));
  };
  get_spec = function(_, text) {
    return spec[$.trim(text)];
  };
  add_element = function(element, data) {
    var add_btn;

    $(element).parent().append("<button class='btn btn-success add'>" + "<i class='icon-plus'></i></button>");
    add_btn = $(element).siblings('.add');
    return $(add_btn).on('click', function(e) {
      var attrs, btn, field, modal, _i, _len, _ref1;

      e.preventDefault();
      modal = new Modal(__('Add'));
      modal.add_form();
      _ref1 = _.keys(data.data);
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        field = _ref1[_i];
        switch (data.data[field]) {
          case 'str':
            modal.add_field(field);
            break;
          case 'unicode':
            modal.add_field(field);
            break;
          case 'int':
            attrs = {
              'data-parser': 'Decimal'
            };
            modal.add_field(field, attrs);
            break;
          case 'Decimal':
            attrs = {
              'data-parser': 'Decimal'
            };
            modal.add_field(field, attrs);
        }
      }
      btn = modal.add_button('info', __('Add'));
      $(btn).on('click', function(e) {
        var _j, _len1, _ref2;

        data = {};
        _ref2 = $(modal.get()).find('.form-horizontal').find('input');
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          field = _ref2[_j];
          data[$(field).attr('data-binding')] = $.trim(field.value);
        }
        return _libs.open({
          url: $(element).attr('data-source'),
          type: 'POST',
          data: data,
          success: function(data) {
            modal.hide();
            return that.set_details(element, false);
          }
        });
      });
      return modal.show();
    });
  };
  that.parse = function(body) {
    body = body.replace(trans_regex, translate);
    body = body.replace(spec_regex, get_spec);
    return body;
  };
  that.bind = function(where, actions_object, string_id) {
    var editor, element, _fn, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3, _results;

    _ref1 = where.find('[data-click]');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      element = _ref1[_i];
      $(element).on('click', function(e) {
        e.preventDefault();
        return _libs.goto($(this).attr('data-click'), this);
      });
    }
    _ref2 = $(where).find('[data-source]');
    _fn = function(element) {
      var actions;

      if ($(element).attr('data-actions') != null) {
        actions = JSON.parse($(element).attr('data-actions'));
      }
      return that.set_details(element, null, actions);
    };
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      element = _ref2[_j];
      _fn(element);
    }
    _ref3 = $(where).find('[data-wysiwyg]');
    _results = [];
    for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
      element = _ref3[_k];
      if ($(element).attr('data-wysiwyg') === 'true') {
        editor = new nicEditor();
        _results.push(editor.panelInstance($(element).attr('id')));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };
  that.set_details = function(element, caching, actions) {
    if (caching == null) {
      caching = true;
    }
    return _libs.open({
      url: $(element).attr('data-source'),
      caching: caching,
      success: function(data) {
        var contents;

        contents = $(element).html();
        $(element).html('');
        if (contents === 'null') {
          return $(element).html(__('No category'));
        }
        if ($(element).attr('data-tag') != null) {
          tag_renderers[$(element).attr('data-tag')](element, data);
        } else {
          if (element.tagName == null) {
            tag_renderers.div(element, data, contents);
          } else {
            tag_renderers[element.tagName.lower()](element, data);
          }
        }
        if ((actions != null) && actions.add) {
          return _libs.open({
            url: $(element).attr('data-source') + 'spec/',
            success: function(data) {
              return add_element(element, data);
            }
          });
        }
      }
    });
  };
  tag_renderers = {
    select: function(element, data) {
      var el, _i, _len, _ref1, _results;

      _ref1 = data.data;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        _results.push($(element).append($("<option/>", {
          value: el.string_id,
          text: el[$(element).attr('data-shown_property')]
        })));
      }
      return _results;
    },
    div: function(element, data, contents) {
      var el, _i, _len, _ref1, _results;

      _ref1 = data.data;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        if (el.string_id === contents) {
          $(element).html(el[$(element).attr('data-binding')]);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    imagelist: function(element, data, clear, offset) {
      var _imagelist;

      if (clear == null) {
        clear = true;
      }
      if (offset == null) {
        offset = 0;
      }
      _imagelist = imagelist({
        element: element
      });
      if (clear) {
        return _imagelist.create(data);
      } else {
        return _imagelist.render(data, offset);
      }
    },
    checklist: function(element, data) {
      var blah, checkbox_group, el, id, _i, _len, _ref1, _results;

      element = _helpers.clone(element);
      $(element).on('change', 'input', function(e) {
        var el, selected, _i, _len, _ref1;

        selected = [];
        _ref1 = $(e.delegateTarget).find("input[type='checkbox']:checked");
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          el = _ref1[_i];
          selected.push(el.value);
        }
        return $(e.delegateTarget).attr('data-value', JSON.stringify(selected));
      });
      _ref1 = data.data;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        el = _ref1[_i];
        id = _libs.random_string();
        checkbox_group = $('<div/>', {
          "class": 'checkbox-group'
        });
        blah = checkbox_group.append($("<input/>", {
          type: 'checkbox',
          value: el.string_id,
          id: id
        }));
        checkbox_group.append($('<label/>', {
          "for": id,
          text: el[$(element).attr('data-shown_property')]
        }));
        _results.push(element.append(checkbox_group));
      }
      return _results;
    }
  };
  _.extend(tag_renderers, spec.tag_renderers);
  fill = function(where, string_id) {
    return _libs.open({
      url: spec.url + string_id,
      success: function(data) {
        var col, column, details, editor, _ref1, _results;

        _ref1 = data.data;
        _results = [];
        for (column in _ref1) {
          details = _ref1[column];
          col = $("[data-binding='" + column + "']");
          if (col.attr('data-wysiwyg') !== 'true') {
            _results.push(col.val(details));
          } else {
            editor = nicEditors.findEditor(col.attr('id'));
            _results.push(editor.setContent(details));
          }
        }
        return _results;
      }
    });
  };
  that.open = function(name, where, object, action, string_id) {
    if (action == null) {
      action = 'add';
    }
    return _libs.open({
      url: base_url + ("templates/" + name),
      success: function(data) {
        data = that.parse(data);
        where.html(data);
        if (action === 'edit') {
          that.bind(where, object, string_id);
          return fill(where, string_id);
        } else {
          return that.bind(where, object);
        }
      },
      tout: 3600
    });
  };
  inheriter = _.partial(init, template, that, spec);
  _.extend(_libs, inheriter(palantir));
  _helpers = inheriter(helpers);
  _notifier = inheriter(notifier);
  return that;
};

imagelist = function(spec, that) {
  var add_image, controls, element, images, img_type, inheriter, make_clickable, root, _helpers, _palantir;

  that = that != null ? that : {};
  element = null;
  images = null;
  controls = null;
  root = null;
  img_type = /image.*/;
  that.create = function(data) {
    element = _helpers.clone(spec.element);
    root = $(element).attr('data-source');
    images = $('<div/>', {
      "class": 'images'
    });
    controls = $('<div/>', {
      "class": 'controls'
    });
    element.append(images);
    element.append(controls);
    if (data.more) {
      controls.append($('<button/>', {
        "class": 'btn btn-more btn-large',
        html: $('<i/>', {
          "class": 'icon-plus'
        })
      }));
    }
    controls.append($('<input/>', {
      type: 'file',
      id: 'image-upload',
      style: 'display:none;',
      multiple: 'true',
      accept: "image/*"
    }));
    controls.find('#image-upload').on('change', add_image);
    controls.append($('<button/>', {
      "class": 'btn btn-success btn-upload btn-large',
      html: $('<i/>', {
        "class": 'icon-upload'
      })
    }));
    controls.find('button.btn-upload').on('click', function(e) {
      e.preventDefault();
      return $('#image-upload').click();
    });
    return that.render(data, 0);
  };
  add_image = function(event) {
    var fd, file, image, img, reader, _fn, _i, _len, _ref, _results;

    _ref = this.files;
    _fn = function(image) {
      return $(reader).on('load', function(e) {
        return image[0].src = e.target.result;
      });
    };
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      if (!file.type.match(img_type)) {
        continue;
      }
      img = $('<div/>', {
        "class": 'image'
      });
      image = $('<img/>');
      img.append(image);
      images.prepend(img);
      image[0].file = file;
      reader = new FileReader();
      _fn(image);
      reader.readAsDataURL(file);
      $(img).append($('<div/>', {
        "class": 'loader'
      }));
      fd = new FormData();
      fd.append('image', file);
      _results.push((function(loader, image) {
        return _palantir.open({
          url: root,
          type: 'POST',
          data: fd,
          xhr: function() {
            var xhr;

            xhr = $.ajaxSettings.xhr();
            xhr.upload.addEventListener('progress', (function(e) {
              var prog;

              prog = e.loaded / e.total * 100;
              return loader.attr('style', "top:" + prog + "%");
            }), false);
            $(xhr.upload).on('load', function(e) {
              return loader.attr('style', "top:100%");
            });
            return xhr;
          },
          contentType: false,
          processData: false,
          success: function(data) {
            $(image).attr('data-src', data.string_id);
            return make_clickable(image);
          }
        });
      })($(img).find('.loader'), image));
    }
    return _results;
  };
  that.render = function(data, offset) {
    var btn_more, img, wrapper, _i, _len, _ref, _results;

    btn_more = controls.find('button.btn-more');
    btn_more.off('click');
    btn_more.on('click', function(e) {
      e.preventDefault();
      return _palantir.open({
        url: root + ("?offset=" + (offset + 20)),
        success: function(data) {
          return that.render(data, offset + 20);
        }
      });
    });
    if (data.more === false) {
      controls.find('button.btn-more').hide();
    }
    _ref = data.data;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      img = _ref[_i];
      wrapper = $('<div/>', {
        "class": 'image'
      });
      images.append(wrapper);
      _results.push((function(wrapper, addr, string_id) {
        return _palantir.open({
          url: addr + '?base64=true&dimx=150&dimy=150',
          success: function(data) {
            var image;

            image = new Image();
            image.src = 'data:image/jpeg;base64,' + data;
            $(image).attr('draggable', 'true');
            $(image).attr('data-src', string_id);
            $(image).on('dragstart', function(e) {
              return this.src = addr + '?dimx=400&dimy=400';
            });
            wrapper.append(image);
            return make_clickable(image);
          }
        });
      })(wrapper, root + img.string_id, img.string_id));
    }
    return _results;
  };
  make_clickable = function(image) {
    return $(image).on('click', function(e) {
      var addr, input, modal;

      addr = root + $(image).attr('data-src');
      modal = new Modal(__('Image details'));
      modal.set_body($('<img/>', {
        src: addr + '?dimx=558&dimy=558',
        "class": 'img-preview'
      }));
      modal.set_body($('<div/>', {
        "class": 'img-info',
        html: $('<input/>', {
          type: 'text',
          "class": 'input input-xxlarge img-addr',
          value: addr + '?dimx=400&dimy=400'
        })
      }));
      input = $(modal.get()).find('.img-addr');
      input.on('click', function(e) {
        e.preventDefault();
        return this.select();
      });
      return modal.show();
    });
  };
  inheriter = _.partial(init, imagelist, that, spec);
  _helpers = inheriter(helpers);
  _palantir = inheriter(palantir);
  return that;
};

cache = singleton(function(spec, that) {
  var backup_job, dirty, has_timeout, timeout, _ref;

  that = that != null ? that : {};
  timeout = (_ref = spec.timeout) != null ? _ref : 60;
  cache = {};
  dirty = false;
  has_timeout = function(data) {
    var now;

    now = (new Date()).getTime();
    if (now > data.expires) {
      return true;
    }
    return false;
  };
  that.get = function(key) {
    if (cache[key]) {
      if (has_timeout(cache[key])) {
        that["delete"](key);
      } else {
        return cache[key].payload;
      }
    }
    return void 0;
  };
  that.set = function(key, value, new_timeout) {
    var payload;

    if (new_timeout == null) {
      new_timeout = timeout;
    }
    payload = {
      expires: (new Date()).getTime() + 1000 * new_timeout,
      payload: value
    };
    cache[key] = payload;
    dirty = true;
    return key;
  };
  that["delete"] = function(key) {
    delete cache[key];
    return void 0;
  };
  that.genkey = function(data) {
    return data.type + data.url + JSON.stringify(data.data);
  };
  backup_job = setInterval((function() {
    if (dirty === true) {
      localStorage['palantir_cache'] = JSON.stringify(cache);
      return dirty = false;
    }
  }), 1000);
  setTimeout((function() {
    if (typeof localStorage === "undefined" || localStorage === null) {
      window.clearInterval(backup_job);
      return;
    }
    if (localStorage['palantir_cache'] != null) {
      return cache = JSON.parse(localStorage['palantir_cache']);
    }
  }), 0);
  return that;
});

palantir = singleton(function(spec, that) {
  var base_url, cached_memoize, inheriter, on_error, promise, routes, save_cache, tout, wait_time, _cache, _ref, _ref1, _ref2, _template, _that;

  that = that != null ? that : {};
  if (spec[0] != null) {
    spec = spec[0];
  }
  _that = {};
  _.extend(_that, notifier(spec));
  _.extend(_that, helpers(spec));
  routes = [];
  if (spec.debug) {
    tout = 0;
  } else {
    tout = (_ref = spec.timeout) != null ? _ref : 3600 * 24 * 2;
  }
  base_url = (_ref1 = spec.base_url) != null ? _ref1 : url_root;
  spec.base_url = base_url;
  wait_time = (_ref2 = spec.wait_time) != null ? _ref2 : 100;
  cached_memoize = function(fn, data, new_tout, caching) {
    var cached, key;

    if (caching == null) {
      caching = true;
    }
    key = _cache.genkey(data);
    cached = _cache.get(key);
    if ((cached != null) && caching && data.type === 'GET') {
      if (typeof cached.data === 'string') {
        return data.success(cached.data);
      }
      return data.success(cached);
    }
    _cache.set(key, 'waiting', 15);
    return fn(data);
  };
  save_cache = function(fn, cache_key, new_timeout) {
    return function(data) {
      if (data.req_time == null) {
        if (typeof data === 'string') {
          _cache.set(cache_key, {
            data: data
          }, new_timeout);
        } else {
          _cache.set(cache_key, data, new_timeout);
        }
      }
      return fn(data);
    };
  };
  on_error = function(fn_succ, fn_err, cache_key) {
    return function(data) {
      var cached;

      cached = _cache.get(cache_key);
      if (cached != null) {
        if (cached !== 'waiting') {
          return fn_succ(cached);
        }
        delete _cache["delete"](cache_key);
      }
      _that.notify(data);
      if (fn_err != null) {
        return fn_err(data);
      }
    };
  };
  promise = function(fn, args, key) {
    return function() {
      var cached;

      cached = _cache.get(key);
      if ((cached == null) || cached !== 'waiting') {
        return fn.apply(null, args);
      }
      if (cached === 'waiting') {
        return setTimeout(promise(fn, args, key), wait_time);
      }
    };
  };
  that.open = function(req_data) {
    var args, key;

    if (req_data.type == null) {
      req_data.type = 'GET';
    }
    key = _cache.genkey(req_data);
    req_data.error = on_error(req_data.success, req_data.error, key);
    if (req_data.type === 'GET' && req_data.palantir_cache !== false) {
      req_data.success = save_cache(req_data.success, key, req_data.palantir_timeout);
    }
    args = [$.ajax, req_data, req_data.tout, req_data.caching];
    return promise(cached_memoize, args, key)();
  };
  that.template = function(name, where, object) {
    if (object == null) {
      object = {};
    }
    return that.open({
      url: base_url + ("templates/" + name),
      success: function(data) {
        data = _template.parse(data);
        where.html(data);
        return _template.bind(where);
      },
      palantir_timeout: tout
    });
  };
  that.route = function(route, fn) {
    routes.push({
      route: route,
      fn: fn
    });
    return function() {
      return fn.apply(null, arguments);
    };
  };
  that.goto = function(route, target) {
    var matching;

    matching = _.where(routes, {
      route: route
    });
    if (matching.length > 0) {
      return matching[0].fn(target);
    }
  };
  setTimeout((function() {
    return $(window).on('hashchange', function(e) {
      var res;

      e.preventDefault();
      e.stopPropagation();
      res = _.where(routes, {
        route: window.location.hash.slice(1)
      });
      if (res.length > 0) {
        return res[0].fn();
      }
    });
  }), 0);
  inheriter = _.partial(init, palantir, that, spec);
  _template = inheriter(template);
  _cache = inheriter(cache);
  return that;
});
